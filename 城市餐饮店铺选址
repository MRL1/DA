'''
【项目07】  城市餐饮店铺选址分析

1、从三个维度“口味”、“人均消费”、“性价比”对不同菜系进行比较，并筛选出可开店铺的餐饮类型
要求：
① 计算出三个维度的指标得分
② 评价方法：
   口味 → 得分越高越好
   性价比 → 得分越高越好
   人均消费 → 价格适中即可
③ 制作散点图，x轴为“人均消费”，y轴为“性价比得分”，点的大小为“口味得分”
   绘制柱状图，分别显示“口味得分”、“性价比得分”
   * 建议用bokeh做图
提示：
① 数据清洗，清除空值、为0的数据
② 口味指标计算方法 → 口味评分字段，按照餐饮类别分组算均值，再做标准化处理
③ 人均消费指标计算方法 → 人均消费字段，按照餐饮类别分组算均值，再做标准化处理
④ 性价比指标计算方法 → 性价比 = （口味 + 环境 + 服务）/人均消费，按照餐饮类别分组算均值，再做标准化处理
⑤ 数据计算之前，检查一下数据分布，去除异常值（以外限为标准）
   * 这里排除了高端奢侈餐饮的数据干扰
⑥ 注意，这里先分别计算三个指标，再合并数据（merge）作图，目的是指标之间的噪音数据不相互影响

2、选择一个餐饮类型，在qgis中做将上海划分成格网空间，结合python辅助做空间指标评价，得到餐饮选址位置
* 课程这里以“素菜馆为例”
课程数据
① net_population.shp → 投影坐标系，上海1km²格网内的人口密度数据
② road.shp → 投影坐标西，上海道路数据
要求：
① 通过空间分析，分别计算每个格网内的几个指标：人口密度指标、道路密度指标、餐饮热度指标、同类竞品指标
② 评价方法：
   人口密度指标 → 得分越高越好
   道路密度指标 → 得分越高越好
   餐饮热度指标 → 得分越高越好
   同类竞品指标 → 得分越低越好
   综合指标 = 人口密度指标*0.4 + 餐饮热度指标*0.3 + 道路密度指标*0.2 +同类竞品指标*0.1
③ 最后得到较好选址的网格位置的中心坐标，以及所属区域
   * 可以用bokeh制作散点图
提示：
① 道路密度指标计算方法 → 网格内道路长度
② 餐饮热度指标计算方法 → 网格内餐饮poi计数
③ 同类竞品指标计算方法 → 网格内素菜馆poi计数
④ 餐饮poi数据记得投影
⑤ 可以以“net_population.shp”为网格基础数据，做空间统计
⑥ 在qgis做空间统计之后，网格数据导出点数据，投影成wgs84地理坐标系，导出excel数据，在python做指标标准化等
⑦ 在bokeh中做散点图时，注意添加一个size字段，通过最终评分来赋值
⑧ 在bokeh中做散点图时，可以给TOP10的点用颜色区分

'''

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')

from bokeh.plotting import figure, show, output_file
from bokeh.models import ColumnDataSource,HoverTool


import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')

from bokeh.plotting import figure, show, output_file
from bokeh.models import ColumnDataSource


'''
（1）加载数据
'''
df1 = pd.read_excel('E:\桌面\项目数据\项目07城市餐饮店铺选址分析\上海餐饮数据.xlsx', sheetname=0, header=0)
'''
（2）计算口味、客单价、性价比指标
'''
data1 = df1[['类别','口味','环境','服务','人均消费']]
data1.dropna(inplace=True)
data1 = data1[(data1['口味'] > 0) & (data1['人均消费'] > 0)]
data1['性价比'] = (data1['口味'] + data1['环境'] + data1['服务']) / data1['人均消费']
              
#数据清洗 + 性价比计算

def f1():
    fig,axes = plt.subplots(1,3,figsize = (10,4))
    data1.boxplot(column = ['口味'], ax = axes[0])
    data1.boxplot(column = ['人均消费'], ax = axes[1])
    data1.boxplot(column = ['性价比'], ax = axes[2])      
#创建函数f1,制作箱型图，查看异常值；
              
def f2(data, col):
    q1 = data[col].quantile(q = 0.25)
    q3 = data[col].quantile(q = 0.75)
    iqr = q3-q1
    t1 = q1 - 3*iqr
    t2 = q3 + 3*iqr
    return data[(data[col] > t1) & (data[col] < t2)][['类别', col]] #要筛选出一个单独的数据
#创建函数f2，清除异常值；

data_kw = f2(data1, '口味')
data_rj = f2(data1,'人均消费')
data_xjb = f2(data1,'性价比')
def f3(data, col):
    col_name = col + '_norm'
    data_gp = data.groupby('类别').mean()
    data_gp[col_name] = (data_gp[col] - data_gp[col].min()) / (data_gp[col].max()-data_gp[col].min())
    data_gp.sort_values(by = col_name, inplace = True, ascending = False)
    return data_gp
#创建函数f3，标准化指标并排序

data_kw_score = f3(data_kw, '口味')
data_rj_score = f3(data_rj, '人均消费')
data_xjb_score = f3(data_xjb, '性价比')
#指标标准化得分

data_final_q1 = pd.merge(data_kw_score, data_rj_score, left_index = True, right_index = True)
data_final_q1 = pd.merge(data_final_q1, data_xjb_score, left_index = True,right_index = True)
#数据合并


'''
绘制图表，辅助分析
'''
from bokeh.layouts import gridplot
from bokeh.models import HoverTool
from bokeh.models import BoxAnnotation



output_file('project07_h1.html')

data_final_q1['size'] = data_final_q1['口味_norm'] * 40
data_final_q1.index.name = 'type'
data_final_q1.columns = ['kw', 'kw_norm','price', 'price_norm', 'xjb', 'xjb_norm', 'size']
#将列名改为英文

source = ColumnDataSource(data_final_q1)
#创建数据

hover = HoverTool(tooltips = [("餐饮类型", '@type'),
                              ('人均消费', '@price'),
                              ('性价比得分', '@xjb_norm'),
                              ('口味得分', '@kw_norm')
                              ])


result = figure(plot_width = 800, plot_height = 300, title = '餐饮类型得分',
                x_axis_label = '人均消费', y_axis_label = '性价比得分',
                tools = [hover,'box_select, reset, xwheel_zoom, pan, crosshair'])
result.circle(x = 'price', y = 'xjb_norm', source = source,
              line_color = 'black', line_dash = [6,4], fill_alpha = 0.6, size = 'size')

price_mid = BoxAnnotation(left = 40, right = 80, fill_alpha = 0.1, fill_color = 'navy') #区间中值的设置
result.add_layout(price_mid)


#散点图

data_type = data_final_q1.index.tolist()
kw = figure(plot_width = 800, plot_height = 300, title= '口味得分',
             x_range = data_type,
             tools = [hover,'box_select, reset, xwheel_zoom, pan, crosshair'])
kw.vbar(x = 'type', top = 'kw_norm', source = source,
        width = 0.8, alpha = 0.7, color = 'red')
#柱状图1

price = figure(plot_width = 800, plot_height = 300, title= '人均消费得分',
             x_range = data_type,
             tools = [hover,'box_select, reset, xwheel_zoom, pan, crosshair'])
price.vbar(x = 'type', top = 'price_norm', source = source,
        width = 0.8, alpha = 0.7, color = 'green')
#柱状图2

p = gridplot([[result], [kw], [price]]) #把3个并排放一块
show(p)


print('finish')

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')

from bokeh.plotting import figure, show, output_file
from bokeh.models import ColumnDataSource


'''
（1）加载数据
'''

df2 = pd.read_excel(r'E:\桌面\项目实战\项目07_餐饮地址选择\qgisExport.xlsx', sheetname=0, header=0)

df2.fillna(0, inplace = True)
df2.columns = ['人口密度', '道路长度', 'lat','lng','餐饮计数', '素菜餐饮计数' ]

'''
（2）指标统计
'''
df2['rkmd_norm'] = (df2['人口密度'] - df2['人口密度'].min()) / df2['人口密度'].max() - df2['人口密度'].min()
df2['cyrd_norm'] = (df2['餐饮计数'] - df2['餐饮计数'].min()) / df2['餐饮计数'].max() - df2['餐饮计数'].min()
df2['tljp_norm'] = (df2['素菜餐饮计数'].max() - df2['素菜餐饮计数']) / df2['素菜餐饮计数'].max() - df2['素菜餐饮计数'].min()
df2['dlmi_norm'] = (df2['道路长度'] - df2['道路长度'].min()) / df2['道路长度'].max() - df2['道路长度'].min()
#指标标准化

df2['final_score'] = df2['rkmd_norm']*0.4 + df2['cyrd_norm']*0.3+df2['tljp_norm']*0.1 + df2['dlmi_norm']*0.2
data_final_q2 = df2.sort_values(by = 'final_score', ascending=False).reset_index()

'''
（3）制作空间散点图
'''

data_final_q2['size'] = data_final_q2['final_score'] * 20
data_final_q2['color'] = 'green'
data_final_q2['color'].iloc[:10] = 'red'


source = ColumnDataSource(data_final_q2)

output_file('project07_h2.html')

hover = HoverTool(tooltips=[("经度", "@lng"),
                            ("维度", "@lat"),
                            ("最终得分", "@final_score")
                            ])
p = figure(plot_width = 800, plot_height=800,
           title = "空间散点图",
           tools = [hover, 'box_select, reset, wheel_zoom, pan, crosshair'])

p.square(x = 'lng', y = 'lat', source = source,
         line_color = 'black', fill_alpha = 0.5,
         size = 'size', color = 'color')  #做一个方形图

p.ygrid.grid_line_dash = [6,4]
p.xgrid.grid_line_dash = [6,4]
show(p)

print('finish')
